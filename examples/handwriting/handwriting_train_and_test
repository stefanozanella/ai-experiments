#!/usr/bin/env ruby

require 'bundler/setup'
require 'ruby_fann/neural_network'

train = RubyFann::TrainData.new(:filename => File.join(File.dirname(__FILE__), 'train.dat'))
puts "Loaded examples: #{train.length}"

fann = RubyFann::Standard.new(:num_inputs => 256, :hidden_neurons => [64], :num_outputs => 10)
fann.train_on_data(train, 2000000, 1, 0.01)

puts "Testing network with same data as training"
mse_fake = fann.test_data(train)

puts "Error: #{mse_fake}"

puts "Testing network with validation set"
validation = RubyFann::TrainData.new(:filename => File.join(File.dirname(__FILE__), 'validation.dat'))
puts "Loaded examples: #{validation.length}"
mse_good = fann.test_data(validation)
puts "Error: #{mse_good}"

puts "Building input from validation set"
raw_input = File.open(File.join(File.dirname(__FILE__), 'validation.dat')).readlines.drop(1)

error_count = 0
examples_count = 0
while raw_input.length > 0 do
  input = raw_input.shift.split.map { |k| Float k }
  expected_output = raw_input.shift.split

  output = fann.run(input)
  recognized_digit = output.index output.max
  expected_digit = expected_output.index expected_output.max

  puts "#{recognized_digit} == #{expected_digit}"
  error_count +=1 if recognized_digit != expected_digit
  examples_count += 1
end

puts "Error rate on global run: #{error_count.to_f / examples_count * 100 }"
