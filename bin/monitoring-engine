#!/usr/bin/env ruby
$:.unshift File.join(File.dirname(__FILE__),"..","lib")

require 'bundler/setup'

require 'eventmachine'
require 'em-http'
require 'json'

require 'metric_fetcher'

def compress(data)
  # Cache max value
  max = data.max
  return data.map { |point| 2*point / max - 1 }
end

def notify_state(short_trend, long_trend, output)
  puts output
end

EventMachine.run do
  host = 'monitoring.derecom.it'
  metric = 'mercury_derecom_it_collectd.apache-derecom_it.apache_requests.value'
  apache_requests = MetricFetcher.new host, metric

  EventMachine.add_periodic_timer(5) do
    puts "Entering main loop"

    puts "Fetching recent metrics"
    apache_requests.fetch
    apache_requests.callback do |sample|
      puts "Preprocessing metrics"
      normalized_short = compress(sample[:short_term])
      normalized_long = compress(sample[:long_term])

      puts normalized_short.length
      puts normalized_long.length

      puts "Feeding the neural network"
      # Fake fake fake
      k = (1 << Random.new.rand(0..2))
      output = [ k[2], k[1], k[0] ]
      output_map = {
              [0,0,1] => :normal,
              [0,1,0] => :warning,
              [1,0,0] => :critical }
      # Fake fake fake
    
      puts "Printing the output"
      notify_state(sample[:short_term], sample[:long_term], output_map[output])
    end
  end
end
